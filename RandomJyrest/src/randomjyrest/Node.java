package randomjyrest;

import java.util.Map;
import java.util.Set;

/**
 * Implements the abstract concept of a node in a tree.
 */
public abstract class Node
{

	/**
	 * Generate the predictions for all observations that reach this node in the tree.
	 * 
	 * The predictions Map is initialised to contain an empty array for each class, and then passed down the tree in a depth first
	 * manner and filled up. Once the prediction generation is finished, there will be a prediction for each observation.
	 * 
	 * @param datasetToPredict	The data for every observation in the entire set of data that is to be predicted (not just the data
	 * 							for the observations that have reached this node).
	 * @param obsToPredict		The indices of the observations that have reached this node.
	 * @param predictions		The predictions of the observations in the entire dataset.
	 * @return					The predictions of the observations in the entire dataset that were passed in with the predictions of
	 * 							the observations that reached this node (generated by the subtree rooted at this node) added to it.
	 */
	public Map<String, double[]> predict(Map<String, double[]> datasetToPredict, Set<Integer> obsToPredict,
			Map<String, double[]> predictions)
	{
		return predictions;
	}

}
